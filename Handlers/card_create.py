from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message

from services.card_service import create_card
from keyboards.keyboards import main_menu
from states import CreateCardStates

from sqlalchemy import select

router_create = Router()

@router_create.message(Command("create_card"))
@router_create.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def cmd_create_card(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ (–ø–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞)")
    await state.set_state(CreateCardStates.waiting_for_front)

@router_create.message(CreateCardStates.waiting_for_front)
async def record_front(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    await state.update_data(front=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ (–∑–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞)")
    await state.set_state(CreateCardStates.waiting_for_back)

@router_create.message(CreateCardStates.waiting_for_back)
async def record_back(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    await state.update_data(back=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞')
    await state.set_state(CreateCardStates.waiting_for_group)

@router_create.message(CreateCardStates.waiting_for_group)
async def record_group(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã
    """
    await state.update_data(group=message.text if message.text != "-" else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã")
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞')
    await state.set_state(CreateCardStates.waiting_for_photo_id)

@router_create.message(CreateCardStates.waiting_for_photo_id)
async def record_photo_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    if message.text == "-":
        await state.update_data(photo_id="–ë–µ–∑ —Ñ–æ—Ç–æ")
    else:
        try:
            await state.update_data(photo_id=message.photo[-1].file_id)
        except TypeError:
            await message.reply("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")

    data = await state.get_data()

    #–°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫—É
    card = await create_card(
            front=data['front'],
            back=data['back'],
            photo_id=data['photo_id'],
            group=data["group"],
        )

    if card.photo_id == "–ë–µ–∑ —Ñ–æ—Ç–æ":
        await message.answer(f"""‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
üìå–ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞: {card.front}
üìå–ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞: {card.back}
üóÇ–ì—Ä—É–ø–ø–∞: {card.group}""",
                            reply_markup=main_menu()
                            )
    else:
        await message.answer_photo(photo=card.photo_id,
                                    caption=f"""‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
üìå–ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞: {card.front}
üìå–ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞: {card.back}
üóÇ–ì—Ä—É–ø–ø–∞: {card.group}""",
                                    reply_markup=main_menu())

    await state.clear()
